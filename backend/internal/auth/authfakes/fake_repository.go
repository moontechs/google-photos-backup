// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"google-backup/internal/auth"
	"sync"
)

type FakeRepository struct {
	GetOauthClientDataStub        func(string) ([]byte, error)
	getOauthClientDataMutex       sync.RWMutex
	getOauthClientDataArgsForCall []struct {
		arg1 string
	}
	getOauthClientDataReturns struct {
		result1 []byte
		result2 error
	}
	getOauthClientDataReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SaveOauthClientDataStub        func(string, []byte) error
	saveOauthClientDataMutex       sync.RWMutex
	saveOauthClientDataArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	saveOauthClientDataReturns struct {
		result1 error
	}
	saveOauthClientDataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) GetOauthClientData(arg1 string) ([]byte, error) {
	fake.getOauthClientDataMutex.Lock()
	ret, specificReturn := fake.getOauthClientDataReturnsOnCall[len(fake.getOauthClientDataArgsForCall)]
	fake.getOauthClientDataArgsForCall = append(fake.getOauthClientDataArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOauthClientDataStub
	fakeReturns := fake.getOauthClientDataReturns
	fake.recordInvocation("GetOauthClientData", []interface{}{arg1})
	fake.getOauthClientDataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) GetOauthClientDataCallCount() int {
	fake.getOauthClientDataMutex.RLock()
	defer fake.getOauthClientDataMutex.RUnlock()
	return len(fake.getOauthClientDataArgsForCall)
}

func (fake *FakeRepository) GetOauthClientDataCalls(stub func(string) ([]byte, error)) {
	fake.getOauthClientDataMutex.Lock()
	defer fake.getOauthClientDataMutex.Unlock()
	fake.GetOauthClientDataStub = stub
}

func (fake *FakeRepository) GetOauthClientDataArgsForCall(i int) string {
	fake.getOauthClientDataMutex.RLock()
	defer fake.getOauthClientDataMutex.RUnlock()
	argsForCall := fake.getOauthClientDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) GetOauthClientDataReturns(result1 []byte, result2 error) {
	fake.getOauthClientDataMutex.Lock()
	defer fake.getOauthClientDataMutex.Unlock()
	fake.GetOauthClientDataStub = nil
	fake.getOauthClientDataReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetOauthClientDataReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getOauthClientDataMutex.Lock()
	defer fake.getOauthClientDataMutex.Unlock()
	fake.GetOauthClientDataStub = nil
	if fake.getOauthClientDataReturnsOnCall == nil {
		fake.getOauthClientDataReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getOauthClientDataReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) SaveOauthClientData(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.saveOauthClientDataMutex.Lock()
	ret, specificReturn := fake.saveOauthClientDataReturnsOnCall[len(fake.saveOauthClientDataArgsForCall)]
	fake.saveOauthClientDataArgsForCall = append(fake.saveOauthClientDataArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.SaveOauthClientDataStub
	fakeReturns := fake.saveOauthClientDataReturns
	fake.recordInvocation("SaveOauthClientData", []interface{}{arg1, arg2Copy})
	fake.saveOauthClientDataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) SaveOauthClientDataCallCount() int {
	fake.saveOauthClientDataMutex.RLock()
	defer fake.saveOauthClientDataMutex.RUnlock()
	return len(fake.saveOauthClientDataArgsForCall)
}

func (fake *FakeRepository) SaveOauthClientDataCalls(stub func(string, []byte) error) {
	fake.saveOauthClientDataMutex.Lock()
	defer fake.saveOauthClientDataMutex.Unlock()
	fake.SaveOauthClientDataStub = stub
}

func (fake *FakeRepository) SaveOauthClientDataArgsForCall(i int) (string, []byte) {
	fake.saveOauthClientDataMutex.RLock()
	defer fake.saveOauthClientDataMutex.RUnlock()
	argsForCall := fake.saveOauthClientDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) SaveOauthClientDataReturns(result1 error) {
	fake.saveOauthClientDataMutex.Lock()
	defer fake.saveOauthClientDataMutex.Unlock()
	fake.SaveOauthClientDataStub = nil
	fake.saveOauthClientDataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SaveOauthClientDataReturnsOnCall(i int, result1 error) {
	fake.saveOauthClientDataMutex.Lock()
	defer fake.saveOauthClientDataMutex.Unlock()
	fake.SaveOauthClientDataStub = nil
	if fake.saveOauthClientDataReturnsOnCall == nil {
		fake.saveOauthClientDataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveOauthClientDataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOauthClientDataMutex.RLock()
	defer fake.getOauthClientDataMutex.RUnlock()
	fake.saveOauthClientDataMutex.RLock()
	defer fake.saveOauthClientDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Repository = new(FakeRepository)
