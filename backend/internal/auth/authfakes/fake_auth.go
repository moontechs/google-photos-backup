// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"context"
	"google-backup/internal/auth"
	"net/http"
	"sync"

	"golang.org/x/oauth2"
)

type FakeAuth struct {
	GetHttpClientStub        func(context.Context, string, *oauth2.Token) (*http.Client, error)
	getHttpClientMutex       sync.RWMutex
	getHttpClientArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *oauth2.Token
	}
	getHttpClientReturns struct {
		result1 *http.Client
		result2 error
	}
	getHttpClientReturnsOnCall map[int]struct {
		result1 *http.Client
		result2 error
	}
	GetOauthClientDataStub        func(string) (auth.OauthClientData, error)
	getOauthClientDataMutex       sync.RWMutex
	getOauthClientDataArgsForCall []struct {
		arg1 string
	}
	getOauthClientDataReturns struct {
		result1 auth.OauthClientData
		result2 error
	}
	getOauthClientDataReturnsOnCall map[int]struct {
		result1 auth.OauthClientData
		result2 error
	}
	GetRedirectUrlStub        func(string) (string, error)
	getRedirectUrlMutex       sync.RWMutex
	getRedirectUrlArgsForCall []struct {
		arg1 string
	}
	getRedirectUrlReturns struct {
		result1 string
		result2 error
	}
	getRedirectUrlReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetTokenStub        func(context.Context, string, string) (*oauth2.Token, error)
	getTokenMutex       sync.RWMutex
	getTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getTokenReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	getTokenReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	GetUserInfoStub        func(*http.Client) (auth.UserInfo, error)
	getUserInfoMutex       sync.RWMutex
	getUserInfoArgsForCall []struct {
		arg1 *http.Client
	}
	getUserInfoReturns struct {
		result1 auth.UserInfo
		result2 error
	}
	getUserInfoReturnsOnCall map[int]struct {
		result1 auth.UserInfo
		result2 error
	}
	SaveOauthClientDataStub        func(string, auth.OauthClientData) error
	saveOauthClientDataMutex       sync.RWMutex
	saveOauthClientDataArgsForCall []struct {
		arg1 string
		arg2 auth.OauthClientData
	}
	saveOauthClientDataReturns struct {
		result1 error
	}
	saveOauthClientDataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuth) GetHttpClient(arg1 context.Context, arg2 string, arg3 *oauth2.Token) (*http.Client, error) {
	fake.getHttpClientMutex.Lock()
	ret, specificReturn := fake.getHttpClientReturnsOnCall[len(fake.getHttpClientArgsForCall)]
	fake.getHttpClientArgsForCall = append(fake.getHttpClientArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *oauth2.Token
	}{arg1, arg2, arg3})
	stub := fake.GetHttpClientStub
	fakeReturns := fake.getHttpClientReturns
	fake.recordInvocation("GetHttpClient", []interface{}{arg1, arg2, arg3})
	fake.getHttpClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuth) GetHttpClientCallCount() int {
	fake.getHttpClientMutex.RLock()
	defer fake.getHttpClientMutex.RUnlock()
	return len(fake.getHttpClientArgsForCall)
}

func (fake *FakeAuth) GetHttpClientCalls(stub func(context.Context, string, *oauth2.Token) (*http.Client, error)) {
	fake.getHttpClientMutex.Lock()
	defer fake.getHttpClientMutex.Unlock()
	fake.GetHttpClientStub = stub
}

func (fake *FakeAuth) GetHttpClientArgsForCall(i int) (context.Context, string, *oauth2.Token) {
	fake.getHttpClientMutex.RLock()
	defer fake.getHttpClientMutex.RUnlock()
	argsForCall := fake.getHttpClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuth) GetHttpClientReturns(result1 *http.Client, result2 error) {
	fake.getHttpClientMutex.Lock()
	defer fake.getHttpClientMutex.Unlock()
	fake.GetHttpClientStub = nil
	fake.getHttpClientReturns = struct {
		result1 *http.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetHttpClientReturnsOnCall(i int, result1 *http.Client, result2 error) {
	fake.getHttpClientMutex.Lock()
	defer fake.getHttpClientMutex.Unlock()
	fake.GetHttpClientStub = nil
	if fake.getHttpClientReturnsOnCall == nil {
		fake.getHttpClientReturnsOnCall = make(map[int]struct {
			result1 *http.Client
			result2 error
		})
	}
	fake.getHttpClientReturnsOnCall[i] = struct {
		result1 *http.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetOauthClientData(arg1 string) (auth.OauthClientData, error) {
	fake.getOauthClientDataMutex.Lock()
	ret, specificReturn := fake.getOauthClientDataReturnsOnCall[len(fake.getOauthClientDataArgsForCall)]
	fake.getOauthClientDataArgsForCall = append(fake.getOauthClientDataArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOauthClientDataStub
	fakeReturns := fake.getOauthClientDataReturns
	fake.recordInvocation("GetOauthClientData", []interface{}{arg1})
	fake.getOauthClientDataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuth) GetOauthClientDataCallCount() int {
	fake.getOauthClientDataMutex.RLock()
	defer fake.getOauthClientDataMutex.RUnlock()
	return len(fake.getOauthClientDataArgsForCall)
}

func (fake *FakeAuth) GetOauthClientDataCalls(stub func(string) (auth.OauthClientData, error)) {
	fake.getOauthClientDataMutex.Lock()
	defer fake.getOauthClientDataMutex.Unlock()
	fake.GetOauthClientDataStub = stub
}

func (fake *FakeAuth) GetOauthClientDataArgsForCall(i int) string {
	fake.getOauthClientDataMutex.RLock()
	defer fake.getOauthClientDataMutex.RUnlock()
	argsForCall := fake.getOauthClientDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuth) GetOauthClientDataReturns(result1 auth.OauthClientData, result2 error) {
	fake.getOauthClientDataMutex.Lock()
	defer fake.getOauthClientDataMutex.Unlock()
	fake.GetOauthClientDataStub = nil
	fake.getOauthClientDataReturns = struct {
		result1 auth.OauthClientData
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetOauthClientDataReturnsOnCall(i int, result1 auth.OauthClientData, result2 error) {
	fake.getOauthClientDataMutex.Lock()
	defer fake.getOauthClientDataMutex.Unlock()
	fake.GetOauthClientDataStub = nil
	if fake.getOauthClientDataReturnsOnCall == nil {
		fake.getOauthClientDataReturnsOnCall = make(map[int]struct {
			result1 auth.OauthClientData
			result2 error
		})
	}
	fake.getOauthClientDataReturnsOnCall[i] = struct {
		result1 auth.OauthClientData
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetRedirectUrl(arg1 string) (string, error) {
	fake.getRedirectUrlMutex.Lock()
	ret, specificReturn := fake.getRedirectUrlReturnsOnCall[len(fake.getRedirectUrlArgsForCall)]
	fake.getRedirectUrlArgsForCall = append(fake.getRedirectUrlArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetRedirectUrlStub
	fakeReturns := fake.getRedirectUrlReturns
	fake.recordInvocation("GetRedirectUrl", []interface{}{arg1})
	fake.getRedirectUrlMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuth) GetRedirectUrlCallCount() int {
	fake.getRedirectUrlMutex.RLock()
	defer fake.getRedirectUrlMutex.RUnlock()
	return len(fake.getRedirectUrlArgsForCall)
}

func (fake *FakeAuth) GetRedirectUrlCalls(stub func(string) (string, error)) {
	fake.getRedirectUrlMutex.Lock()
	defer fake.getRedirectUrlMutex.Unlock()
	fake.GetRedirectUrlStub = stub
}

func (fake *FakeAuth) GetRedirectUrlArgsForCall(i int) string {
	fake.getRedirectUrlMutex.RLock()
	defer fake.getRedirectUrlMutex.RUnlock()
	argsForCall := fake.getRedirectUrlArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuth) GetRedirectUrlReturns(result1 string, result2 error) {
	fake.getRedirectUrlMutex.Lock()
	defer fake.getRedirectUrlMutex.Unlock()
	fake.GetRedirectUrlStub = nil
	fake.getRedirectUrlReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetRedirectUrlReturnsOnCall(i int, result1 string, result2 error) {
	fake.getRedirectUrlMutex.Lock()
	defer fake.getRedirectUrlMutex.Unlock()
	fake.GetRedirectUrlStub = nil
	if fake.getRedirectUrlReturnsOnCall == nil {
		fake.getRedirectUrlReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getRedirectUrlReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetToken(arg1 context.Context, arg2 string, arg3 string) (*oauth2.Token, error) {
	fake.getTokenMutex.Lock()
	ret, specificReturn := fake.getTokenReturnsOnCall[len(fake.getTokenArgsForCall)]
	fake.getTokenArgsForCall = append(fake.getTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetTokenStub
	fakeReturns := fake.getTokenReturns
	fake.recordInvocation("GetToken", []interface{}{arg1, arg2, arg3})
	fake.getTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuth) GetTokenCallCount() int {
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	return len(fake.getTokenArgsForCall)
}

func (fake *FakeAuth) GetTokenCalls(stub func(context.Context, string, string) (*oauth2.Token, error)) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = stub
}

func (fake *FakeAuth) GetTokenArgsForCall(i int) (context.Context, string, string) {
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	argsForCall := fake.getTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAuth) GetTokenReturns(result1 *oauth2.Token, result2 error) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	fake.getTokenReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetTokenReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	if fake.getTokenReturnsOnCall == nil {
		fake.getTokenReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.getTokenReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetUserInfo(arg1 *http.Client) (auth.UserInfo, error) {
	fake.getUserInfoMutex.Lock()
	ret, specificReturn := fake.getUserInfoReturnsOnCall[len(fake.getUserInfoArgsForCall)]
	fake.getUserInfoArgsForCall = append(fake.getUserInfoArgsForCall, struct {
		arg1 *http.Client
	}{arg1})
	stub := fake.GetUserInfoStub
	fakeReturns := fake.getUserInfoReturns
	fake.recordInvocation("GetUserInfo", []interface{}{arg1})
	fake.getUserInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuth) GetUserInfoCallCount() int {
	fake.getUserInfoMutex.RLock()
	defer fake.getUserInfoMutex.RUnlock()
	return len(fake.getUserInfoArgsForCall)
}

func (fake *FakeAuth) GetUserInfoCalls(stub func(*http.Client) (auth.UserInfo, error)) {
	fake.getUserInfoMutex.Lock()
	defer fake.getUserInfoMutex.Unlock()
	fake.GetUserInfoStub = stub
}

func (fake *FakeAuth) GetUserInfoArgsForCall(i int) *http.Client {
	fake.getUserInfoMutex.RLock()
	defer fake.getUserInfoMutex.RUnlock()
	argsForCall := fake.getUserInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuth) GetUserInfoReturns(result1 auth.UserInfo, result2 error) {
	fake.getUserInfoMutex.Lock()
	defer fake.getUserInfoMutex.Unlock()
	fake.GetUserInfoStub = nil
	fake.getUserInfoReturns = struct {
		result1 auth.UserInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) GetUserInfoReturnsOnCall(i int, result1 auth.UserInfo, result2 error) {
	fake.getUserInfoMutex.Lock()
	defer fake.getUserInfoMutex.Unlock()
	fake.GetUserInfoStub = nil
	if fake.getUserInfoReturnsOnCall == nil {
		fake.getUserInfoReturnsOnCall = make(map[int]struct {
			result1 auth.UserInfo
			result2 error
		})
	}
	fake.getUserInfoReturnsOnCall[i] = struct {
		result1 auth.UserInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeAuth) SaveOauthClientData(arg1 string, arg2 auth.OauthClientData) error {
	fake.saveOauthClientDataMutex.Lock()
	ret, specificReturn := fake.saveOauthClientDataReturnsOnCall[len(fake.saveOauthClientDataArgsForCall)]
	fake.saveOauthClientDataArgsForCall = append(fake.saveOauthClientDataArgsForCall, struct {
		arg1 string
		arg2 auth.OauthClientData
	}{arg1, arg2})
	stub := fake.SaveOauthClientDataStub
	fakeReturns := fake.saveOauthClientDataReturns
	fake.recordInvocation("SaveOauthClientData", []interface{}{arg1, arg2})
	fake.saveOauthClientDataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuth) SaveOauthClientDataCallCount() int {
	fake.saveOauthClientDataMutex.RLock()
	defer fake.saveOauthClientDataMutex.RUnlock()
	return len(fake.saveOauthClientDataArgsForCall)
}

func (fake *FakeAuth) SaveOauthClientDataCalls(stub func(string, auth.OauthClientData) error) {
	fake.saveOauthClientDataMutex.Lock()
	defer fake.saveOauthClientDataMutex.Unlock()
	fake.SaveOauthClientDataStub = stub
}

func (fake *FakeAuth) SaveOauthClientDataArgsForCall(i int) (string, auth.OauthClientData) {
	fake.saveOauthClientDataMutex.RLock()
	defer fake.saveOauthClientDataMutex.RUnlock()
	argsForCall := fake.saveOauthClientDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuth) SaveOauthClientDataReturns(result1 error) {
	fake.saveOauthClientDataMutex.Lock()
	defer fake.saveOauthClientDataMutex.Unlock()
	fake.SaveOauthClientDataStub = nil
	fake.saveOauthClientDataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuth) SaveOauthClientDataReturnsOnCall(i int, result1 error) {
	fake.saveOauthClientDataMutex.Lock()
	defer fake.saveOauthClientDataMutex.Unlock()
	fake.SaveOauthClientDataStub = nil
	if fake.saveOauthClientDataReturnsOnCall == nil {
		fake.saveOauthClientDataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveOauthClientDataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuth) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getHttpClientMutex.RLock()
	defer fake.getHttpClientMutex.RUnlock()
	fake.getOauthClientDataMutex.RLock()
	defer fake.getOauthClientDataMutex.RUnlock()
	fake.getRedirectUrlMutex.RLock()
	defer fake.getRedirectUrlMutex.RUnlock()
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	fake.getUserInfoMutex.RLock()
	defer fake.getUserInfoMutex.RUnlock()
	fake.saveOauthClientDataMutex.RLock()
	defer fake.saveOauthClientDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuth) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Auth = new(FakeAuth)
