// Code generated by counterfeiter. DO NOT EDIT.
package google_clientfakes

import (
	"google-backup/internal/google_client"
	"sync"
)

type FakeRepository struct {
	CreateUpdateLimitsStub        func(string, []byte) error
	createUpdateLimitsMutex       sync.RWMutex
	createUpdateLimitsArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	createUpdateLimitsReturns struct {
		result1 error
	}
	createUpdateLimitsReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	FindStub        func(string) ([]byte, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		arg1 string
	}
	findReturns struct {
		result1 []byte
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	FindAllStub        func() (map[string][]byte, error)
	findAllMutex       sync.RWMutex
	findAllArgsForCall []struct {
	}
	findAllReturns struct {
		result1 map[string][]byte
		result2 error
	}
	findAllReturnsOnCall map[int]struct {
		result1 map[string][]byte
		result2 error
	}
	FindAllAssignedAccountsStub        func() (map[string][]byte, error)
	findAllAssignedAccountsMutex       sync.RWMutex
	findAllAssignedAccountsArgsForCall []struct {
	}
	findAllAssignedAccountsReturns struct {
		result1 map[string][]byte
		result2 error
	}
	findAllAssignedAccountsReturnsOnCall map[int]struct {
		result1 map[string][]byte
		result2 error
	}
	FindAssignedAccountsStub        func(string) ([]byte, error)
	findAssignedAccountsMutex       sync.RWMutex
	findAssignedAccountsArgsForCall []struct {
		arg1 string
	}
	findAssignedAccountsReturns struct {
		result1 []byte
		result2 error
	}
	findAssignedAccountsReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetLimitsStub        func(string) ([]byte, error)
	getLimitsMutex       sync.RWMutex
	getLimitsArgsForCall []struct {
		arg1 string
	}
	getLimitsReturns struct {
		result1 []byte
		result2 error
	}
	getLimitsReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SaveStub        func(string, []byte) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	SaveAssignedAccountsStub        func(string, []byte) error
	saveAssignedAccountsMutex       sync.RWMutex
	saveAssignedAccountsArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	saveAssignedAccountsReturns struct {
		result1 error
	}
	saveAssignedAccountsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) CreateUpdateLimits(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createUpdateLimitsMutex.Lock()
	ret, specificReturn := fake.createUpdateLimitsReturnsOnCall[len(fake.createUpdateLimitsArgsForCall)]
	fake.createUpdateLimitsArgsForCall = append(fake.createUpdateLimitsArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.CreateUpdateLimitsStub
	fakeReturns := fake.createUpdateLimitsReturns
	fake.recordInvocation("CreateUpdateLimits", []interface{}{arg1, arg2Copy})
	fake.createUpdateLimitsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) CreateUpdateLimitsCallCount() int {
	fake.createUpdateLimitsMutex.RLock()
	defer fake.createUpdateLimitsMutex.RUnlock()
	return len(fake.createUpdateLimitsArgsForCall)
}

func (fake *FakeRepository) CreateUpdateLimitsCalls(stub func(string, []byte) error) {
	fake.createUpdateLimitsMutex.Lock()
	defer fake.createUpdateLimitsMutex.Unlock()
	fake.CreateUpdateLimitsStub = stub
}

func (fake *FakeRepository) CreateUpdateLimitsArgsForCall(i int) (string, []byte) {
	fake.createUpdateLimitsMutex.RLock()
	defer fake.createUpdateLimitsMutex.RUnlock()
	argsForCall := fake.createUpdateLimitsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) CreateUpdateLimitsReturns(result1 error) {
	fake.createUpdateLimitsMutex.Lock()
	defer fake.createUpdateLimitsMutex.Unlock()
	fake.CreateUpdateLimitsStub = nil
	fake.createUpdateLimitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) CreateUpdateLimitsReturnsOnCall(i int, result1 error) {
	fake.createUpdateLimitsMutex.Lock()
	defer fake.createUpdateLimitsMutex.Unlock()
	fake.CreateUpdateLimitsStub = nil
	if fake.createUpdateLimitsReturnsOnCall == nil {
		fake.createUpdateLimitsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createUpdateLimitsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeRepository) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeRepository) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Find(arg1 string) ([]byte, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FindStub
	fakeReturns := fake.findReturns
	fake.recordInvocation("Find", []interface{}{arg1})
	fake.findMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeRepository) FindCalls(stub func(string) ([]byte, error)) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = stub
}

func (fake *FakeRepository) FindArgsForCall(i int) string {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	argsForCall := fake.findArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) FindReturns(result1 []byte, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) FindReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) FindAll() (map[string][]byte, error) {
	fake.findAllMutex.Lock()
	ret, specificReturn := fake.findAllReturnsOnCall[len(fake.findAllArgsForCall)]
	fake.findAllArgsForCall = append(fake.findAllArgsForCall, struct {
	}{})
	stub := fake.FindAllStub
	fakeReturns := fake.findAllReturns
	fake.recordInvocation("FindAll", []interface{}{})
	fake.findAllMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) FindAllCallCount() int {
	fake.findAllMutex.RLock()
	defer fake.findAllMutex.RUnlock()
	return len(fake.findAllArgsForCall)
}

func (fake *FakeRepository) FindAllCalls(stub func() (map[string][]byte, error)) {
	fake.findAllMutex.Lock()
	defer fake.findAllMutex.Unlock()
	fake.FindAllStub = stub
}

func (fake *FakeRepository) FindAllReturns(result1 map[string][]byte, result2 error) {
	fake.findAllMutex.Lock()
	defer fake.findAllMutex.Unlock()
	fake.FindAllStub = nil
	fake.findAllReturns = struct {
		result1 map[string][]byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) FindAllReturnsOnCall(i int, result1 map[string][]byte, result2 error) {
	fake.findAllMutex.Lock()
	defer fake.findAllMutex.Unlock()
	fake.FindAllStub = nil
	if fake.findAllReturnsOnCall == nil {
		fake.findAllReturnsOnCall = make(map[int]struct {
			result1 map[string][]byte
			result2 error
		})
	}
	fake.findAllReturnsOnCall[i] = struct {
		result1 map[string][]byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) FindAllAssignedAccounts() (map[string][]byte, error) {
	fake.findAllAssignedAccountsMutex.Lock()
	ret, specificReturn := fake.findAllAssignedAccountsReturnsOnCall[len(fake.findAllAssignedAccountsArgsForCall)]
	fake.findAllAssignedAccountsArgsForCall = append(fake.findAllAssignedAccountsArgsForCall, struct {
	}{})
	stub := fake.FindAllAssignedAccountsStub
	fakeReturns := fake.findAllAssignedAccountsReturns
	fake.recordInvocation("FindAllAssignedAccounts", []interface{}{})
	fake.findAllAssignedAccountsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) FindAllAssignedAccountsCallCount() int {
	fake.findAllAssignedAccountsMutex.RLock()
	defer fake.findAllAssignedAccountsMutex.RUnlock()
	return len(fake.findAllAssignedAccountsArgsForCall)
}

func (fake *FakeRepository) FindAllAssignedAccountsCalls(stub func() (map[string][]byte, error)) {
	fake.findAllAssignedAccountsMutex.Lock()
	defer fake.findAllAssignedAccountsMutex.Unlock()
	fake.FindAllAssignedAccountsStub = stub
}

func (fake *FakeRepository) FindAllAssignedAccountsReturns(result1 map[string][]byte, result2 error) {
	fake.findAllAssignedAccountsMutex.Lock()
	defer fake.findAllAssignedAccountsMutex.Unlock()
	fake.FindAllAssignedAccountsStub = nil
	fake.findAllAssignedAccountsReturns = struct {
		result1 map[string][]byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) FindAllAssignedAccountsReturnsOnCall(i int, result1 map[string][]byte, result2 error) {
	fake.findAllAssignedAccountsMutex.Lock()
	defer fake.findAllAssignedAccountsMutex.Unlock()
	fake.FindAllAssignedAccountsStub = nil
	if fake.findAllAssignedAccountsReturnsOnCall == nil {
		fake.findAllAssignedAccountsReturnsOnCall = make(map[int]struct {
			result1 map[string][]byte
			result2 error
		})
	}
	fake.findAllAssignedAccountsReturnsOnCall[i] = struct {
		result1 map[string][]byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) FindAssignedAccounts(arg1 string) ([]byte, error) {
	fake.findAssignedAccountsMutex.Lock()
	ret, specificReturn := fake.findAssignedAccountsReturnsOnCall[len(fake.findAssignedAccountsArgsForCall)]
	fake.findAssignedAccountsArgsForCall = append(fake.findAssignedAccountsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FindAssignedAccountsStub
	fakeReturns := fake.findAssignedAccountsReturns
	fake.recordInvocation("FindAssignedAccounts", []interface{}{arg1})
	fake.findAssignedAccountsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) FindAssignedAccountsCallCount() int {
	fake.findAssignedAccountsMutex.RLock()
	defer fake.findAssignedAccountsMutex.RUnlock()
	return len(fake.findAssignedAccountsArgsForCall)
}

func (fake *FakeRepository) FindAssignedAccountsCalls(stub func(string) ([]byte, error)) {
	fake.findAssignedAccountsMutex.Lock()
	defer fake.findAssignedAccountsMutex.Unlock()
	fake.FindAssignedAccountsStub = stub
}

func (fake *FakeRepository) FindAssignedAccountsArgsForCall(i int) string {
	fake.findAssignedAccountsMutex.RLock()
	defer fake.findAssignedAccountsMutex.RUnlock()
	argsForCall := fake.findAssignedAccountsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) FindAssignedAccountsReturns(result1 []byte, result2 error) {
	fake.findAssignedAccountsMutex.Lock()
	defer fake.findAssignedAccountsMutex.Unlock()
	fake.FindAssignedAccountsStub = nil
	fake.findAssignedAccountsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) FindAssignedAccountsReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.findAssignedAccountsMutex.Lock()
	defer fake.findAssignedAccountsMutex.Unlock()
	fake.FindAssignedAccountsStub = nil
	if fake.findAssignedAccountsReturnsOnCall == nil {
		fake.findAssignedAccountsReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.findAssignedAccountsReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetLimits(arg1 string) ([]byte, error) {
	fake.getLimitsMutex.Lock()
	ret, specificReturn := fake.getLimitsReturnsOnCall[len(fake.getLimitsArgsForCall)]
	fake.getLimitsArgsForCall = append(fake.getLimitsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetLimitsStub
	fakeReturns := fake.getLimitsReturns
	fake.recordInvocation("GetLimits", []interface{}{arg1})
	fake.getLimitsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) GetLimitsCallCount() int {
	fake.getLimitsMutex.RLock()
	defer fake.getLimitsMutex.RUnlock()
	return len(fake.getLimitsArgsForCall)
}

func (fake *FakeRepository) GetLimitsCalls(stub func(string) ([]byte, error)) {
	fake.getLimitsMutex.Lock()
	defer fake.getLimitsMutex.Unlock()
	fake.GetLimitsStub = stub
}

func (fake *FakeRepository) GetLimitsArgsForCall(i int) string {
	fake.getLimitsMutex.RLock()
	defer fake.getLimitsMutex.RUnlock()
	argsForCall := fake.getLimitsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) GetLimitsReturns(result1 []byte, result2 error) {
	fake.getLimitsMutex.Lock()
	defer fake.getLimitsMutex.Unlock()
	fake.GetLimitsStub = nil
	fake.getLimitsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetLimitsReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getLimitsMutex.Lock()
	defer fake.getLimitsMutex.Unlock()
	fake.GetLimitsStub = nil
	if fake.getLimitsReturnsOnCall == nil {
		fake.getLimitsReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getLimitsReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Save(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.SaveStub
	fakeReturns := fake.saveReturns
	fake.recordInvocation("Save", []interface{}{arg1, arg2Copy})
	fake.saveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeRepository) SaveCalls(stub func(string, []byte) error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = stub
}

func (fake *FakeRepository) SaveArgsForCall(i int) (string, []byte) {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	argsForCall := fake.saveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) SaveReturns(result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SaveReturnsOnCall(i int, result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SaveAssignedAccounts(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.saveAssignedAccountsMutex.Lock()
	ret, specificReturn := fake.saveAssignedAccountsReturnsOnCall[len(fake.saveAssignedAccountsArgsForCall)]
	fake.saveAssignedAccountsArgsForCall = append(fake.saveAssignedAccountsArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.SaveAssignedAccountsStub
	fakeReturns := fake.saveAssignedAccountsReturns
	fake.recordInvocation("SaveAssignedAccounts", []interface{}{arg1, arg2Copy})
	fake.saveAssignedAccountsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) SaveAssignedAccountsCallCount() int {
	fake.saveAssignedAccountsMutex.RLock()
	defer fake.saveAssignedAccountsMutex.RUnlock()
	return len(fake.saveAssignedAccountsArgsForCall)
}

func (fake *FakeRepository) SaveAssignedAccountsCalls(stub func(string, []byte) error) {
	fake.saveAssignedAccountsMutex.Lock()
	defer fake.saveAssignedAccountsMutex.Unlock()
	fake.SaveAssignedAccountsStub = stub
}

func (fake *FakeRepository) SaveAssignedAccountsArgsForCall(i int) (string, []byte) {
	fake.saveAssignedAccountsMutex.RLock()
	defer fake.saveAssignedAccountsMutex.RUnlock()
	argsForCall := fake.saveAssignedAccountsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) SaveAssignedAccountsReturns(result1 error) {
	fake.saveAssignedAccountsMutex.Lock()
	defer fake.saveAssignedAccountsMutex.Unlock()
	fake.SaveAssignedAccountsStub = nil
	fake.saveAssignedAccountsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) SaveAssignedAccountsReturnsOnCall(i int, result1 error) {
	fake.saveAssignedAccountsMutex.Lock()
	defer fake.saveAssignedAccountsMutex.Unlock()
	fake.SaveAssignedAccountsStub = nil
	if fake.saveAssignedAccountsReturnsOnCall == nil {
		fake.saveAssignedAccountsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveAssignedAccountsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUpdateLimitsMutex.RLock()
	defer fake.createUpdateLimitsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.findAllMutex.RLock()
	defer fake.findAllMutex.RUnlock()
	fake.findAllAssignedAccountsMutex.RLock()
	defer fake.findAllAssignedAccountsMutex.RUnlock()
	fake.findAssignedAccountsMutex.RLock()
	defer fake.findAssignedAccountsMutex.RUnlock()
	fake.getLimitsMutex.RLock()
	defer fake.getLimitsMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	fake.saveAssignedAccountsMutex.RLock()
	defer fake.saveAssignedAccountsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ google_client.Repository = new(FakeRepository)
