// Code generated by counterfeiter. DO NOT EDIT.
package scannerfakes

import (
	"google-backup/internal/scanner"
	"sync"
)

type FakeRepository struct {
	DeleteRescanRequestStub        func(string) error
	deleteRescanRequestMutex       sync.RWMutex
	deleteRescanRequestArgsForCall []struct {
		arg1 string
	}
	deleteRescanRequestReturns struct {
		result1 error
	}
	deleteRescanRequestReturnsOnCall map[int]struct {
		result1 error
	}
	GetRescanRequestsStub        func(string) (map[string][]byte, error)
	getRescanRequestsMutex       sync.RWMutex
	getRescanRequestsArgsForCall []struct {
		arg1 string
	}
	getRescanRequestsReturns struct {
		result1 map[string][]byte
		result2 error
	}
	getRescanRequestsReturnsOnCall map[int]struct {
		result1 map[string][]byte
		result2 error
	}
	UpdateRescanRequestStub        func(string, string, []byte) error
	updateRescanRequestMutex       sync.RWMutex
	updateRescanRequestArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []byte
	}
	updateRescanRequestReturns struct {
		result1 error
	}
	updateRescanRequestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) DeleteRescanRequest(arg1 string) error {
	fake.deleteRescanRequestMutex.Lock()
	ret, specificReturn := fake.deleteRescanRequestReturnsOnCall[len(fake.deleteRescanRequestArgsForCall)]
	fake.deleteRescanRequestArgsForCall = append(fake.deleteRescanRequestArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteRescanRequestStub
	fakeReturns := fake.deleteRescanRequestReturns
	fake.recordInvocation("DeleteRescanRequest", []interface{}{arg1})
	fake.deleteRescanRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) DeleteRescanRequestCallCount() int {
	fake.deleteRescanRequestMutex.RLock()
	defer fake.deleteRescanRequestMutex.RUnlock()
	return len(fake.deleteRescanRequestArgsForCall)
}

func (fake *FakeRepository) DeleteRescanRequestCalls(stub func(string) error) {
	fake.deleteRescanRequestMutex.Lock()
	defer fake.deleteRescanRequestMutex.Unlock()
	fake.DeleteRescanRequestStub = stub
}

func (fake *FakeRepository) DeleteRescanRequestArgsForCall(i int) string {
	fake.deleteRescanRequestMutex.RLock()
	defer fake.deleteRescanRequestMutex.RUnlock()
	argsForCall := fake.deleteRescanRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) DeleteRescanRequestReturns(result1 error) {
	fake.deleteRescanRequestMutex.Lock()
	defer fake.deleteRescanRequestMutex.Unlock()
	fake.DeleteRescanRequestStub = nil
	fake.deleteRescanRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) DeleteRescanRequestReturnsOnCall(i int, result1 error) {
	fake.deleteRescanRequestMutex.Lock()
	defer fake.deleteRescanRequestMutex.Unlock()
	fake.DeleteRescanRequestStub = nil
	if fake.deleteRescanRequestReturnsOnCall == nil {
		fake.deleteRescanRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRescanRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) GetRescanRequests(arg1 string) (map[string][]byte, error) {
	fake.getRescanRequestsMutex.Lock()
	ret, specificReturn := fake.getRescanRequestsReturnsOnCall[len(fake.getRescanRequestsArgsForCall)]
	fake.getRescanRequestsArgsForCall = append(fake.getRescanRequestsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetRescanRequestsStub
	fakeReturns := fake.getRescanRequestsReturns
	fake.recordInvocation("GetRescanRequests", []interface{}{arg1})
	fake.getRescanRequestsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) GetRescanRequestsCallCount() int {
	fake.getRescanRequestsMutex.RLock()
	defer fake.getRescanRequestsMutex.RUnlock()
	return len(fake.getRescanRequestsArgsForCall)
}

func (fake *FakeRepository) GetRescanRequestsCalls(stub func(string) (map[string][]byte, error)) {
	fake.getRescanRequestsMutex.Lock()
	defer fake.getRescanRequestsMutex.Unlock()
	fake.GetRescanRequestsStub = stub
}

func (fake *FakeRepository) GetRescanRequestsArgsForCall(i int) string {
	fake.getRescanRequestsMutex.RLock()
	defer fake.getRescanRequestsMutex.RUnlock()
	argsForCall := fake.getRescanRequestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepository) GetRescanRequestsReturns(result1 map[string][]byte, result2 error) {
	fake.getRescanRequestsMutex.Lock()
	defer fake.getRescanRequestsMutex.Unlock()
	fake.GetRescanRequestsStub = nil
	fake.getRescanRequestsReturns = struct {
		result1 map[string][]byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) GetRescanRequestsReturnsOnCall(i int, result1 map[string][]byte, result2 error) {
	fake.getRescanRequestsMutex.Lock()
	defer fake.getRescanRequestsMutex.Unlock()
	fake.GetRescanRequestsStub = nil
	if fake.getRescanRequestsReturnsOnCall == nil {
		fake.getRescanRequestsReturnsOnCall = make(map[int]struct {
			result1 map[string][]byte
			result2 error
		})
	}
	fake.getRescanRequestsReturnsOnCall[i] = struct {
		result1 map[string][]byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) UpdateRescanRequest(arg1 string, arg2 string, arg3 []byte) error {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.updateRescanRequestMutex.Lock()
	ret, specificReturn := fake.updateRescanRequestReturnsOnCall[len(fake.updateRescanRequestArgsForCall)]
	fake.updateRescanRequestArgsForCall = append(fake.updateRescanRequestArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []byte
	}{arg1, arg2, arg3Copy})
	stub := fake.UpdateRescanRequestStub
	fakeReturns := fake.updateRescanRequestReturns
	fake.recordInvocation("UpdateRescanRequest", []interface{}{arg1, arg2, arg3Copy})
	fake.updateRescanRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRepository) UpdateRescanRequestCallCount() int {
	fake.updateRescanRequestMutex.RLock()
	defer fake.updateRescanRequestMutex.RUnlock()
	return len(fake.updateRescanRequestArgsForCall)
}

func (fake *FakeRepository) UpdateRescanRequestCalls(stub func(string, string, []byte) error) {
	fake.updateRescanRequestMutex.Lock()
	defer fake.updateRescanRequestMutex.Unlock()
	fake.UpdateRescanRequestStub = stub
}

func (fake *FakeRepository) UpdateRescanRequestArgsForCall(i int) (string, string, []byte) {
	fake.updateRescanRequestMutex.RLock()
	defer fake.updateRescanRequestMutex.RUnlock()
	argsForCall := fake.updateRescanRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRepository) UpdateRescanRequestReturns(result1 error) {
	fake.updateRescanRequestMutex.Lock()
	defer fake.updateRescanRequestMutex.Unlock()
	fake.UpdateRescanRequestStub = nil
	fake.updateRescanRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) UpdateRescanRequestReturnsOnCall(i int, result1 error) {
	fake.updateRescanRequestMutex.Lock()
	defer fake.updateRescanRequestMutex.Unlock()
	fake.UpdateRescanRequestStub = nil
	if fake.updateRescanRequestReturnsOnCall == nil {
		fake.updateRescanRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateRescanRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteRescanRequestMutex.RLock()
	defer fake.deleteRescanRequestMutex.RUnlock()
	fake.getRescanRequestsMutex.RLock()
	defer fake.getRescanRequestsMutex.RUnlock()
	fake.updateRescanRequestMutex.RLock()
	defer fake.updateRescanRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scanner.Repository = new(FakeRepository)
